:root {
  --clr-red: hsl(1, 90%, 64%);
  --clr-blue: hsl(219, 85%, 26%);

  --clr-white: hsl(0, 0%, 100%);
  --clr-very-light-grayish-blue: hsl(210, 60%, 98%);
  --clr-light-grayish-blue-1: hsl(211, 68%, 94%);
  --clr-light-grayish-blue-2: hsl(205, 33%, 90%);
  --clr-grayish-blue: hsl(219, 14%, 63%);
  --clr-dark-grayish-blue: hsl(219, 12%, 42%);
  --clr-very-dark-blue: hsl(224, 21%, 14%);

  --fs-900: 1.5rem;
  --fs-400: 1rem;

  --ff-body: "Plus Jakarta Sans", sans-serif;

  --fw-medium: 500;
  --fw-bold: 800;

  --size-400: 1rem;
  --size-300: 0.75rem;
  --size-200: 0.5rem;
}

/*====================
===== CSS RESET ======
====================*/

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
* {
  margin: 0;
  padding: 0;
  font: inherit;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

html,
body {
  height: 100%;
}

/* Set core body defaults */
body {
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture,
svg {
  max-width: 100%;
  display: block;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/*====================
=== UTILITY CLASSES ===
====================*/

.flex {
  display: flex;
  gap: var(--flex-gap, 1rem);
}

.grid {
  display: grid;
  gap: var(--grid-gap, 1rem);
}

.flow > *:where(:not(:first-child)) {
  margin-top: var(--flow-space, 0.5rem);
  /* outline: 1px solid red; */
}

.container {
  max-width: 45em;
  padding: 1rem;
}

@media (min-width: 23.44em) {
  .container {
    padding: 2rem;
    border-radius: 1rem;
  }
}

.text-very-dark-blue {
  color: var(--clr-very-dark-blue);
}
.text-red {
  color: h;
}

.fs-900 {
  font-size: var(--fs-900);
}

.fw-bold {
  font-weight: var(--fw-bold);
}

.d-block {
  display: block;
}

/*====================
=== GENERAL STYLING ===
====================*/

body {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: var(--fs-400);
  font-family: var(--ff-body);
  color: var(--clr-dark-grayish-blue);
  background-color: var(--clr-very-light-grayish-blue);
}

.container {
  background-color: var(--clr-white);
}

.header {
  padding-bottom: 1rem;
  justify-content: space-between;
  align-items: center;
}

.header-text {
  --flex-gap: 0.5rem;
  align-items: center;
}

.header-text .unread-counter {
  padding-inline: 0.5rem;
  color: var(--clr-white);
  background-color: var(--clr-blue);
  border-radius: 0.3rem;
}

.header button {
  cursor: pointer;
  color: var(--clr-dark-grayish-blue);
  border: 0;
  background: transparent;
}

.header button:where(:hover, :focus) {
  color: var(--clr-blue);
}

.notification-component {
  align-items: start;
  padding: var(--size-400);
  border-radius: 0.3rem;
}

.notification-component[data-unread="true"] {
  background-color: var(--clr-very-light-grayish-blue);
}

.avatar,
.notification-image {
  height: 40px;
  width: 40px;
}

.notification {
  width: 100%;
}

.notification p > span {
  color: var(--clr-very-dark-blue);
  font-weight: var(--fw-bold);
}

.notification p > a {
  text-decoration: none;
  color: var(--clr-dark-grayish-blue);
  font-weight: var(--fw-bold);
}

.notification p > a.profile {
  color: var(--clr-very-dark-blue);
}

.notification p > a:where(:hover, :focus),
.notification p > a.profile:where(:hover, :focus) {
  color: var(--clr-blue);
}

.notification > .time-passed {
  color: var(--clr-grayish-blue);
}

.notification-component[data-unread="true"] .notification > p::after {
  content: "â€¢";
  color: var(--clr-red);
}

.notification-pm {
  cursor: pointer;
  border: 1px solid var(--clr-light-grayish-blue-1);
  border-radius: 0.3rem;
  margin-top: var(--size-400);
  padding: var(--size-400);
}

.notification-pm:hover {
  background-color: var(--clr-light-grayish-blue-1);
}

.notification-image > img:where(:hover, :focus) {
  cursor: pointer;
  border: 1px solid var(--clr-light-grayish-blue-2);
  border-radius: 0.3rem;
}
